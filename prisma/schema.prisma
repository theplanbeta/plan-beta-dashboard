generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  name                 String
  password             String
  role                 UserRole        @default(TEACHER)
  active               Boolean         @default(true)
  phone                String?
  avatar               String?
  bio                  String?
  qualifications       String?
  experience           String?
  specializations      String?
  languages            String?
  availability         String?
  availableMorning     Boolean?        @default(true)
  availableEvening     Boolean?        @default(true)
  preferredContact     String?
  teacherLevels        String[]
  teacherTimings       String[]
  teacherTimeSlots     Json?
  hourlyRate           Json?
  currency             String?         @default("EUR")
  whatsapp             String?
  remarks              String?
  requirePasswordChange Boolean        @default(false)
  passwordResetToken   String?
  passwordResetExpiry  DateTime?
  welcomeToken         String?
  welcomeTokenExpiry   DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  batches              Batch[]         @relation("TeacherBatches")
  leads                Lead[]
  teacherHours         TeacherHours[]  @relation("TeacherHours")
  teacherReviews       TeacherReview[] @relation("TeacherReviewer")
  offerLetters         OfferLetter[]   @relation("TeacherOffers")

  @@index([email])
  @@index([role])
  @@index([active])
  @@index([passwordResetToken])
  @@index([welcomeToken])
}

model Student {
  id                 String           @id @default(cuid())
  studentId          String           @unique
  name               String
  whatsapp           String           @unique
  email              String?          @unique
  enrollmentDate     DateTime         @default(now())
  currentLevel       Level            @default(NEW)
  isCombo            Boolean          @default(false)
  comboLevels        String[]
  batchId            String?
  originalPrice      Decimal          @db.Decimal(10, 2)
  discountApplied    Decimal          @default(0) @db.Decimal(10, 2)
  finalPrice         Decimal          @db.Decimal(10, 2)
  currency           String           @default("EUR")
  eurEquivalent      Decimal?         @db.Decimal(10, 2)
  exchangeRateUsed   Decimal?         @db.Decimal(10, 4)
  paymentStatus      PaymentStatus    @default(PENDING)
  totalPaid          Decimal          @default(0) @db.Decimal(10, 2)
  totalPaidEur       Decimal?         @db.Decimal(10, 2)
  balance            Decimal          @default(0) @db.Decimal(10, 2)
  referralSource     ReferralSource
  referredById       String?
  trialAttended      Boolean          @default(false)
  trialDate          DateTime?
  classesAttended      Int              @default(0)
  totalClasses         Int              @default(0)
  attendanceRate       Decimal          @default(0) @db.Decimal(5, 2)
  lastClassDate        DateTime?
  consecutiveAbsences  Int              @default(0)
  lastAbsenceDate      DateTime?
  avgQuizScore         Decimal?         @db.Decimal(5, 2)
  completionStatus   CompletionStatus @default(ACTIVE)
  churnRisk          ChurnRisk        @default(LOW)
  churnMitigatedAt   DateTime?
  suspendedAt        DateTime?
  suspensionReason   String?
  previousBatchId    String?
  notes              String?
  emailNotifications Boolean          @default(true)
  emailWelcome       Boolean          @default(true)
  emailPayment       Boolean          @default(true)
  emailAttendance    Boolean          @default(true)
  emailBatch         Boolean          @default(true)
  emailReferral      Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  attendance         Attendance[]
  invoices           Invoice[]
  convertedFromLead  Lead?
  payments           Payment[]
  refunds            Refund[]
  referralsReceived  Referral[]       @relation("RefereeStudent")
  referralsGiven     Referral[]       @relation("ReferrerStudent")
  batch              Batch?           @relation(fields: [batchId], references: [id])
  referredBy         Student?         @relation("StudentReferrals", fields: [referredById], references: [id])
  referrals          Student[]        @relation("StudentReferrals")
  upsells            Upsell[]
  teacherReviews     TeacherReview[]  @relation("StudentTeacherReviews")
  interactions       StudentInteraction[] @relation("StudentInteractions")

  @@index([studentId])
  @@index([whatsapp])
  @@index([email])
  @@index([batchId])
  @@index([enrollmentDate])
  @@index([paymentStatus])
  @@index([churnRisk])
  @@index([currentLevel])
}

model StudentInteraction {
  id              String              @id @default(cuid())
  studentId       String
  userId          String
  userName        String
  interactionType InteractionType
  category        InteractionCategory
  notes           String
  outcome         String?
  followUpDate    DateTime?
  followUpNeeded  Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  student         Student             @relation("StudentInteractions", fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([userId])
  @@index([interactionType])
  @@index([category])
  @@index([followUpNeeded])
  @@index([followUpDate])
  @@index([createdAt])
}

model Batch {
  id            String         @id @default(cuid())
  batchCode     String         @unique
  level         Level
  startDate     DateTime?
  endDate       DateTime?
  schedule      String?
  teacherId     String?
  totalSeats    Int            @default(10)
  enrolledCount Int            @default(0)
  fillRate      Decimal        @default(0) @db.Decimal(5, 2)
  status        BatchStatus    @default(PLANNING)
  currency      String         @default("EUR")
  revenueTarget Decimal        @default(0) @db.Decimal(10, 2)
  revenueActual Decimal        @default(0) @db.Decimal(10, 2)
  teacherCost   Decimal        @default(0) @db.Decimal(10, 2)
  profit        Decimal        @default(0) @db.Decimal(10, 2)
  fillWarning   Boolean        @default(false)
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  teacher       User?          @relation("TeacherBatches", fields: [teacherId], references: [id])
  leads         Lead[]
  students      Student[]
  teacherHours  TeacherHours[] @relation("BatchHours")

  @@index([batchCode])
  @@index([level])
  @@index([status])
  @@index([startDate])
  @@index([teacherId])
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime         @db.Date
  status    AttendanceStatus @default(ABSENT)
  studentId String
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  student   Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
  @@index([studentId])
  @@index([date])
  @@index([status])
}

model Payment {
  id            String            @id @default(cuid())
  amount        Decimal           @db.Decimal(10, 2)
  paymentDate   DateTime          @default(now())
  method        PaymentMethod
  status        TransactionStatus @default(PENDING)
  currency      String            @default("EUR")
  transactionId String?
  invoiceNumber String?           @unique
  invoiceSent   Boolean           @default(false)
  invoiceUrl    String?
  studentId     String
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  student       Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  receipts      Receipt[]
  refunds       Refund[]

  @@index([studentId])
  @@index([paymentDate])
  @@index([status])
  @@index([invoiceNumber])
  @@index([transactionId])
}

model Receipt {
  id                String   @id @default(cuid())
  receiptNumber     String   @unique
  paymentId         String
  studentId         String
  date              DateTime @default(now())
  currency          String   @default("EUR")
  amountPaid        Decimal  @db.Decimal(10, 2)
  totalAmount       Decimal  @db.Decimal(10, 2)
  balanceRemaining  Decimal  @db.Decimal(10, 2)
  paymentMethod     String
  transactionRef    String?
  invoiceNumber     String?
  courseItems       Json
  pdfPath           String?
  jpgPath           String?
  pdfData           Bytes?
  jpgData           Bytes?
  pdfSize           Int?
  jpgSize           Int?
  downloadCount     Int      @default(0)
  lastAccessedAt    DateTime?
  sentToEmail       String?
  emailSentAt       DateTime?
  whatsappSent      Boolean  @default(false)
  whatsappSentAt    DateTime?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  payment           Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([receiptNumber])
  @@index([paymentId])
  @@index([studentId])
  @@index([date])
  @@index([lastAccessedAt])
}

model Refund {
  id                   String       @id @default(cuid())
  studentId            String
  paymentId            String?
  refundAmount         Decimal      @db.Decimal(10, 2)
  currency             String       @default("EUR")
  refundDate           DateTime     @default(now())
  refundMethod         PaymentMethod
  refundReason         RefundReason
  processedByUserId    String
  processedByUserName  String
  transactionId        String?
  status               RefundStatus @default(PENDING)
  notes                String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  student              Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  payment              Payment?     @relation(fields: [paymentId], references: [id])

  @@index([studentId])
  @@index([paymentId])
  @@index([refundDate])
  @@index([status])
  @@index([processedByUserId])
}

model Referral {
  id             String       @id @default(cuid())
  referralDate   DateTime     @default(now())
  referrerId     String
  refereeId      String
  enrollmentDate DateTime?
  month1Complete Boolean      @default(false)
  payoutAmount   Decimal      @default(2000) @db.Decimal(10, 2)
  payoutStatus   PayoutStatus @default(PENDING)
  payoutDate     DateTime?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  referee        Student      @relation("RefereeStudent", fields: [refereeId], references: [id], onDelete: Cascade)
  referrer       Student      @relation("ReferrerStudent", fields: [referrerId], references: [id], onDelete: Cascade)

  @@unique([referrerId, refereeId])
  @@index([referrerId])
  @@index([refereeId])
  @@index([payoutStatus])
  @@index([month1Complete])
}

model Upsell {
  id                String    @id @default(cuid())
  fromLevel         Level
  toLevel           Level
  studentId         String
  currentProgress   Decimal   @default(0) @db.Decimal(5, 2)
  emailsSent        Int       @default(0)
  lastEmailDate     DateTime?
  converted         Boolean   @default(false)
  conversionDate    DateTime?
  additionalRevenue Decimal?  @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  student           Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([converted])
  @@index([currentProgress])
}

model EmailQueue {
  id           String    @id @default(cuid())
  to           String
  subject      String
  templateType String
  templateData Json
  scheduledFor DateTime
  sentAt       DateTime?
  status       String    @default("PENDING")
  opened       Boolean   @default(false)
  clicked      Boolean   @default(false)
  attempts     Int       @default(0)
  lastError    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status])
  @@index([scheduledFor])
  @@index([to])
}

model DailyMetrics {
  id                  String   @id @default(cuid())
  date                DateTime @unique @db.Date
  dailyRevenue        Decimal  @default(0) @db.Decimal(10, 2)
  monthlyRevenue      Decimal  @default(0) @db.Decimal(10, 2)
  newEnrollments      Int      @default(0)
  totalActiveStudents Int      @default(0)
  batchesFull         Int      @default(0)
  batchesFilling      Int      @default(0)
  batchesRunning      Int      @default(0)
  studentsAtRisk      Int      @default(0)
  studentsDropped     Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([date])
}

model Lead {
  id                  String         @id @default(cuid())
  name                String
  whatsapp            String
  email               String?
  phone               String?
  source              ReferralSource
  status              LeadStatus     @default(NEW)
  quality             LeadQuality    @default(WARM)
  interestedLevel     Level?
  interestedCombo     Boolean?
  interestedLevels    String[]       @default([])
  firstContactDate    DateTime       @default(now())
  lastContactDate     DateTime?
  trialScheduledDate  DateTime?
  trialAttendedDate   DateTime?
  converted           Boolean        @default(false)
  convertedDate       DateTime?
  studentId           String?        @unique
  batchId             String?
  interestedMonth     String?
  interestedBatchTime String?
  followUpDate        DateTime?
  followUpNotes       String?
  contactAttempts     Int            @default(0)
  notes               String?
  assignedToId        String?
  instagramHandle     String?
  sourceReelId        String?
  sourceReelUrl       String?
  firstTouchpoint     String?
  contentInteractions Json?
  leadScore           Int            @default(0)
  socialEngagement    Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  invoices            Invoice[]
  assignedTo          User?          @relation(fields: [assignedToId], references: [id])
  interestedBatch     Batch?         @relation(fields: [batchId], references: [id])
  convertedToStudent  Student?       @relation(fields: [studentId], references: [id])
  sourceContent       ContentPerformance? @relation("ContentLeads", fields: [sourceReelId], references: [contentId])

  @@index([status])
  @@index([quality])
  @@index([source])
  @@index([converted])
  @@index([assignedToId])
  @@index([batchId])
  @@index([instagramHandle])
  @@index([sourceReelId])
  @@index([leadScore])
}

model AuditLog {
  id            String        @id @default(cuid())
  action        AuditAction
  severity      AuditSeverity @default(INFO)
  userId        String?
  userEmail     String?
  userName      String?
  ipAddress     String?
  userAgent     String?
  entityType    String?
  entityId      String?
  description   String
  metadata      Json?
  requestPath   String?
  requestMethod String?
  statusCode    Int?
  errorMessage  String?
  errorStack    String?
  createdAt     DateTime      @default(now())

  @@index([action])
  @@index([severity])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  date            DateTime      @default(now())
  dueDate         DateTime
  currency        String        @default("EUR")
  status          InvoiceStatus @default(DRAFT)
  totalAmount     Decimal       @db.Decimal(10, 2)
  paidAmount      Decimal       @default(0) @db.Decimal(10, 2)
  remainingAmount Decimal       @db.Decimal(10, 2)
  items           Json
  leadId          String?
  studentId       String?
  pdfUrl          String?
  jpgUrl          String?
  sentToEmail     String?
  emailSentAt     DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lead            Lead?         @relation(fields: [leadId], references: [id])
  student         Student?      @relation(fields: [studentId], references: [id])

  @@index([invoiceNumber])
  @@index([leadId])
  @@index([studentId])
  @@index([status])
  @@index([date])
}

model ConversionAttempt {
  id             String   @id @default(cuid())
  idempotencyKey String   @unique
  invoiceId      String
  leadId         String
  studentId      String?
  paidAmount     Decimal  @db.Decimal(10, 2)
  currency       String
  batchId        String?
  isCombo        Boolean?
  comboLevels    String[] @default([])
  status         String   @default("PENDING")
  errorMessage   String?
  userId         String?
  userEmail      String?
  result         Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([invoiceId])
  @@index([leadId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
}

model TeacherHours {
  id              String    @id @default(cuid())
  teacherId       String
  batchId         String?
  date            DateTime  @db.Date
  hoursWorked     Decimal   @db.Decimal(5, 2)
  description     String
  hourlyRate      Decimal?  @db.Decimal(10, 2)
  totalAmount     Decimal   @db.Decimal(10, 2)
  paid            Boolean   @default(false)
  paidDate        DateTime?
  paidAmount      Decimal?  @db.Decimal(10, 2)
  paymentNotes    String?
  status          String    @default("PENDING")
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  batch           Batch?    @relation("BatchHours", fields: [batchId], references: [id])
  teacher         User      @relation("TeacherHours", fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@index([batchId])
  @@index([date])
  @@index([status])
  @@index([paid])
}

model TeacherReview {
  id         String   @id @default(cuid())
  studentId  String
  teacherId  String
  rating     Int?
  category   String?
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  student Student @relation("StudentTeacherReviews", fields: [studentId], references: [id], onDelete: Cascade)
  teacher User    @relation("TeacherReviewer", fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([teacherId])
  @@index([createdAt])
}

model ContentPerformance {
  id              String   @id @default(cuid())
  platform        String
  contentType     String
  contentId       String   @unique
  contentUrl      String
  publishedAt     DateTime
  views           Int      @default(0)
  reach           Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  shares          Int      @default(0)
  saves           Int      @default(0)
  leadsGenerated  Int      @default(0)
  enrollments     Int      @default(0)
  revenue         Decimal  @default(0) @db.Decimal(10, 2)
  caption         String?
  hashtags        String[]
  topic           String?
  engagementRate  Decimal? @db.Decimal(5, 2)
  conversionRate  Decimal? @db.Decimal(5, 2)
  roi             Decimal? @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  leads           Lead[]   @relation("ContentLeads")

  @@index([platform])
  @@index([contentType])
  @@index([publishedAt])
  @@index([topic])
  @@index([engagementRate])
  @@index([conversionRate])
}

model InstagramMessage {
  id              String   @id @default(cuid())
  messageId       String   @unique
  conversationId  String
  instagramHandle String
  direction       String
  content         String
  sentAt          DateTime
  isRead          Boolean  @default(false)
  leadCreated     Boolean  @default(false)
  leadId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([instagramHandle])
  @@index([conversationId])
  @@index([leadCreated])
  @@index([sentAt])
}

model InstagramComment {
  id              String   @id @default(cuid())
  commentId       String   @unique
  mediaId         String
  mediaUrl        String?
  username        String
  text            String
  commentedAt     DateTime
  replied         Boolean  @default(false)
  replyText       String?
  repliedAt       DateTime?
  triggerWords    String[]
  leadIntent      Boolean  @default(false)
  leadCreated     Boolean  @default(false)
  leadId          String?
  priority        String   @default("low")
  processed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([mediaId])
  @@index([username])
  @@index([leadIntent])
  @@index([leadCreated])
  @@index([replied])
  @@index([priority])
  @@index([processed])
  @@index([commentedAt])
}

enum UserRole {
  FOUNDER
  MARKETING
  TEACHER
}

enum Level {
  NEW
  A1
  A1_HYBRID
  A1_HYBRID_MALAYALAM
  A2
  B1
  B2
  SPOKEN_GERMAN
}

enum PaymentStatus {
  PAID
  PENDING
  PARTIAL
  OVERDUE
}

enum PaymentMethod {
  BANK_TRANSFER
  UPI
  CASH
  CARD
  OTHER
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
  REFUNDED
}

enum ReferralSource {
  META_ADS
  INSTAGRAM
  GOOGLE
  ORGANIC
  REFERRAL
  OTHER
}

enum BatchStatus {
  PLANNING
  FILLING
  FULL
  RUNNING
  COMPLETED
  POSTPONED
  CANCELLED
}

enum ChurnRisk {
  LOW
  MEDIUM
  HIGH
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum CompletionStatus {
  ACTIVE
  COMPLETED
  DROPPED
  ON_HOLD
  SUSPENDED
}

enum LeadStatus {
  NEW
  CONTACTED
  INTERESTED
  TRIAL_SCHEDULED
  TRIAL_ATTENDED
  CONVERTED
  LOST
}

enum LeadQuality {
  HOT
  WARM
  COLD
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  LATE
}

enum AuditAction {
  LOGIN
  LOGOUT
  LOGIN_FAILED
  PASSWORD_CHANGED
  PASSWORD_RESET_REQUESTED
  PASSWORD_RESET_COMPLETED
  LEAD_CREATED
  LEAD_UPDATED
  LEAD_DELETED
  LEAD_CONVERTED
  INVOICE_GENERATED
  INVOICE_SENT
  INVOICE_UPDATED
  INVOICE_CANCELLED
  PAYMENT_RECEIVED
  REFUND_PROCESSED
  RECEIPT_GENERATED
  RECEIPT_DOWNLOADED
  RECEIPT_SENT
  STUDENT_CREATED
  LEAD_TO_STUDENT_CONVERSION
  STUDENT_UPDATED
  STUDENT_DELETED
  BATCH_CREATED
  BATCH_UPDATED
  BATCH_DELETED
  TEACHER_CREATED
  TEACHER_UPDATED
  TEACHER_DELETED
  TEACHER_ACTIVATED
  TEACHER_DEACTIVATED
  TEACHER_HOURS_LOGGED
  TEACHER_HOURS_APPROVED
  TEACHER_HOURS_REJECTED
  TEACHER_HOURS_PAID
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  SYSTEM_ERROR
  DATABASE_ERROR
  API_ERROR
  EMAIL_SENT
  EMAIL_FAILED
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

model Subreddit {
  id               String       @id @default(cuid())
  name             String       @unique
  description      String?
  category         String?
  active           Boolean      @default(true)
  lastFetched      DateTime?
  postCount        Int          @default(0)
  currentTimeframe String       @default("week") // week, month, year, all
  posts            RedditPost[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([active])
  @@index([name])
}

model RedditPost {
  id            String        @id @default(cuid())
  redditId      String        @unique
  subredditId   String
  subredditName String
  title         String
  selftext      String?
  author        String
  url           String
  permalink     String
  upvotes       Int           @default(0)
  numComments   Int           @default(0)
  postedAt      DateTime
  fetchedAt     DateTime      @default(now())
  saved         Boolean       @default(false)
  analyzed      Boolean       @default(false)
  subreddit     Subreddit     @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  contentIdeas  ContentIdea[]
  createdAt     DateTime      @default(now())

  @@index([subredditId])
  @@index([saved])
  @@index([postedAt])
  @@index([upvotes])
}

model ContentIdea {
  id                String     @id @default(cuid())
  redditPostId      String
  hook              String
  script            String
  visualSuggestions String
  caption           String
  hashtags          String[]
  topic             String
  status            String     @default("DRAFT")
  notes             String?
  redditPost        RedditPost @relation(fields: [redditPostId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([status])
  @@index([createdAt])
}

enum InteractionType {
  PHONE_CALL
  WHATSAPP
  EMAIL
  IN_PERSON
  SMS
  OTHER
}

enum InteractionCategory {
  CHURN_OUTREACH
  PAYMENT_REMINDER
  ATTENDANCE_FOLLOW_UP
  GENERAL_CHECK_IN
  COMPLAINT_RESOLUTION
  COURSE_INQUIRY
  FEEDBACK_REQUEST
  REFERRAL_DISCUSSION
  OTHER
}

enum RefundStatus {
  PENDING
  PROCESSED
  CANCELLED
}

enum RefundReason {
  STUDENT_WITHDRAWAL
  OVERPAYMENT
  SERVICE_ISSUE
  DUPLICATE_PAYMENT
  BATCH_CANCELLED
  OTHER
}

model OfferLetter {
  id                  String      @id @default(cuid())
  offerNumber         String      @unique

  // Teacher info
  teacherId           String
  teacher             User        @relation("TeacherOffers", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherAddress      String

  // Dates
  offerDate           DateTime
  acceptanceDeadline  DateTime

  // Position
  positionType        String      @default("PART_TIME")

  // Batch rates (historical snapshot)
  batchAssignments    Json

  // Status tracking
  status              OfferStatus @default(DRAFT)
  sentAt              DateTime?
  viewedAt            DateTime?

  // Generated PDF
  pdfUrl              String?
  pdfData             Bytes?

  // Audit
  createdBy           String
  createdByEmail      String
  notes               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@index([teacherId])
  @@index([status])
  @@index([offerDate])
  @@index([offerNumber])
}

enum OfferStatus {
  DRAFT
  GENERATED
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
}
